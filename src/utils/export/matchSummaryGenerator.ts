
export const generateEnhancedMatchSummary = (
  selectedFixtureData: any,
  goals: any[],
  cards: any[],
  trackedPlayers: any[],
  events: any[],
  homeScore: number,
  awayScore: number,
  matchTime: number,
  formatTime: (seconds: number) => string
) => {
  if (!selectedFixtureData) return '';

  const homeTeam = selectedFixtureData.home_team?.name || 'Home Team';
  const awayTeam = selectedFixtureData.away_team?.name || 'Away Team';
  
  const homeGoals = goals.filter(g => g.team === homeTeam);
  const awayGoals = goals.filter(g => g.team === awayTeam);
  const homeCards = cards.filter(c => c.team === homeTeam);
  const awayCards = cards.filter(c => c.team === awayTeam);
  
  const homeYellowCards = homeCards.filter(c => c.type === 'yellow').length;
  const homeRedCards = homeCards.filter(c => c.type === 'red').length;
  const awayYellowCards = awayCards.filter(c => c.type === 'yellow').length;
  const awayRedCards = awayCards.filter(c => c.type === 'red').length;
  
  const totalPlayersTracked = trackedPlayers.length;
  const averagePlayTime = totalPlayersTracked > 0 
    ? trackedPlayers.reduce((sum, p) => sum + p.totalTime, 0) / totalPlayersTracked 
    : 0;

  let summary = `ENHANCED MATCH SUMMARY\n`;
  summary += `${'='.repeat(50)}\n\n`;
  
  summary += `📅 Match: ${homeTeam} vs ${awayTeam}\n`;
  summary += `📊 Final Score: ${homeScore} - ${awayScore}\n`;
  summary += `⏱️ Match Duration: ${formatTime(matchTime)}\n`;
  summary += `📍 Date: ${new Date().toLocaleDateString()}\n\n`;
  
  summary += `TEAM STATISTICS\n`;
  summary += `${'-'.repeat(30)}\n`;
  summary += `${homeTeam}:\n`;
  summary += `  ⚽ Goals: ${homeGoals.length}\n`;
  summary += `  🟨 Yellow Cards: ${homeYellowCards}\n`;
  summary += `  🟥 Red Cards: ${homeRedCards}\n\n`;
  
  summary += `${awayTeam}:\n`;
  summary += `  ⚽ Goals: ${awayGoals.length}\n`;
  summary += `  🟨 Yellow Cards: ${awayYellowCards}\n`;
  summary += `  🟥 Red Cards: ${awayRedCards}\n\n`;
  
  if (goals.length > 0) {
    summary += `GOAL DETAILS\n`;
    summary += `${'-'.repeat(20)}\n`;
    goals.forEach(goal => {
      summary += `⚽ ${formatTime(goal.time)} - ${goal.playerName} (${goal.team}) - ${goal.type}\n`;
    });
    summary += '\n';
  }
  
  if (cards.length > 0) {
    summary += `DISCIPLINARY ACTIONS\n`;
    summary += `${'-'.repeat(25)}\n`;
    cards.forEach(card => {
      const cardIcon = card.type === 'yellow' ? '🟨' : '🟥';
      summary += `${cardIcon} ${formatTime(card.time)} - ${card.player} (${card.team}) - ${card.type} card\n`;
    });
    summary += '\n';
  }
  
  if (trackedPlayers.length > 0) {
    summary += `PLAYER TIME TRACKING\n`;
    summary += `${'-'.repeat(25)}\n`;
    summary += `📊 Total Players Tracked: ${totalPlayersTracked}\n`;
    summary += `⏱️ Average Playing Time: ${formatTime(Math.round(averagePlayTime))}\n\n`;
    
    summary += `Individual Player Times:\n`;
    trackedPlayers
      .sort((a, b) => b.totalTime - a.totalTime)
      .forEach(player => {
        const status = player.isPlaying ? '🟢 Playing' : '⏸️ Stopped';
        summary += `  ${player.name} (${player.team}): ${formatTime(player.totalTime)} ${status}\n`;
      });
    summary += '\n';
  }
  
  if (events.length > 0) {
    summary += `EVENT TIMELINE\n`;
    summary += `${'-'.repeat(20)}\n`;
    events
      .sort((a, b) => a.time - b.time)
      .forEach(event => {
        summary += `${formatTime(event.time)} - ${event.description}\n`;
      });
    summary += '\n';
  }
  
  summary += `MATCH SUMMARY\n`;
  summary += `${'-'.repeat(20)}\n`;
  summary += `📊 Total Goals: ${goals.length}\n`;
  summary += `🟨 Total Yellow Cards: ${homeYellowCards + awayYellowCards}\n`;
  summary += `🟥 Total Red Cards: ${homeRedCards + awayRedCards}\n`;
  summary += `📋 Total Events: ${events.length}\n`;
  summary += `⏱️ Match Duration: ${formatTime(matchTime)}\n\n`;
  
  summary += `Generated by Referee Tools - ${new Date().toLocaleString()}\n`;
  summary += `${'='.repeat(50)}`;
  
  return summary;
};
